# DATABASE: For local development, this should match what is defined in
# docker-compose.yml. The values here are applicable for local development.
DATABASE_NAME="diplicity"
DATABASE_USER="postgres"
DATABASE_PASSWORD="postgres"
DATABASE_HOST="db"
DATABASE_PORT="5432"

# DJANGO: These settings are required to create a super user when starting the
# application
DJANGO_DEBUG="True"
DJANGO_SUPERUSER_USERNAME="superuser"
DJANGO_SUPERUSER_EMAIL="superuser@example.com"
DJANGO_SUPERUSER_PASSWORD="example-password"

# FIREBASE: To get Firebase credentials for Cloud Messaging, follow these steps:
# 1. Go to Firebase Console (https://console.firebase.google.com)
# 2. Select the diplicity-react project
# 3. Go to Project Settings (gear icon) -> Service accounts
# 4. Click "Generate New Private Key" button
# 5. Save the JSON file and use its contents to fill in these values:
FIREBASE_TYPE="service_account"
FIREBASE_PROJECT_ID="your-project-id"
FIREBASE_PRIVATE_KEY_ID="your-private-key-id"
# Note: The private key should include the full key including
# the "-----BEGIN PRIVATE KEY-----" and "-----END PRIVATE KEY-----"
FIREBASE_PRIVATE_KEY="your-private-key"
FIREBASE_CLIENT_EMAIL="your-client-email"
FIREBASE_CLIENT_ID="your-client-id"
FIREBASE_AUTH_URI="https://accounts.google.com/o/oauth2/auth"
FIREBASE_TOKEN_URI="https://oauth2.googleapis.com/token"
FIREBASE_AUTH_PROVIDER_X509_CERT_URL="https://www.googleapis.com/oauth2/v1/certs"
FIREBASE_CLIENT_X509_CERT_URL="your-client-x509-cert-uri"

# GOOGLE OAUTH: You need to log into the Google Cloud Console to get the
# credentials for the Diplicity Django Web application. Here are the steps:
# 1. Go to Google Cloud Console
# 2. Make sure you are using the diplicity-django project
# 3. Under "APIs and Services" -> "Credentials" find "Diplicity Django Web"
#    under "OAuth 2.0 Client IDs"
# 4. Copy the "Client ID" and "Client Secret" and paste them below as:
GOOGLE_OAUTH_CLIENT_ID="your-client-id"
GOOGLE_OAUTH_CLIENT_SECRET="your-client-secret"

# DJANGO: For local development, we use the default Django secret key.

# Sign into sentry.io
SENTRY_DSN="your-sentry-dsn"

# SOCIAL SECRET: This is a secret key used as a password for social auth.
# For local development, this can be any random string.
SOCIAL_SECRET="your-social-secret"

# VITE_GOOGLE_CLIENT_ID: This is the client ID for the Google OAuth client.
# Use the same values as GOOGLE_OAUTH_CLIENT_ID
VITE_GOOGLE_CLIENT_ID="your-client-id"

# VITE_DIPLICITY_API_BASE_URL: This is the URL for the Diplicity API.
# For local development, this should be "http://localhost:8000"
VITE_DIPLICITY_API_BASE_URL="http://localhost:8000"

# HONEYCOMB OBSERVABILITY: Set up OpenTelemetry tracing to Honeycomb
# To get your Honeycomb API key:
# 1. Go to https://ui.honeycomb.io/account
# 2. Navigate to "Team Settings" -> "Environments & API Keys"
# 3. Create a new API key or use an existing one
# 4. Copy the API key and paste it below
# HONEYCOMB_API_KEY="your-honeycomb-api-key-here"

# OTEL_SERVICE_NAME="diplicity-service"
