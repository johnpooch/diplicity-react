# Generated by Django 4.2.24 on 2025-09-24 08:03

from django.db import migrations


def create_template_phases(apps, schema_editor):
    """Create template phases from existing variant start_data."""
    Variant = apps.get_model('variant', 'Variant')
    Phase = apps.get_model('game', 'Phase')
    Unit = apps.get_model('game', 'Unit')
    SupplyCenter = apps.get_model('game', 'SupplyCenter')

    for variant in Variant.objects.all():
        # Skip if template phase already exists
        if Phase.objects.filter(variant=variant, game=None).exists():
            continue

        start_data = variant.start_data
        if not start_data:
            continue

        # Create template phase
        template_phase = Phase.objects.create(
            game=None,  # Template phases don't belong to games
            variant=variant,
            ordinal=0,  # All template phases have ordinal 0
            status='template',  # PhaseStatus.TEMPLATE value
            season=start_data.get('season', 'Spring'),
            year=start_data.get('year', 1901),
            type=start_data.get('type', 'Movement'),
            scheduled_resolution=None,
            options=None
        )

        # Create Units from start_data
        for unit_data in start_data.get('units', []):
            Unit.objects.create(
                phase=template_phase,
                type=unit_data['type'],
                nation=unit_data['nation'],
                province=unit_data['province'],
                dislodged=unit_data.get('dislodged', False)
            )

        # Create SupplyCenter from start_data
        for sc_data in start_data.get('supply_centers', []):
            SupplyCenter.objects.create(
                phase=template_phase,
                nation=sc_data['nation'],
                province=sc_data['province']
            )


def reverse_create_template_phases(apps, schema_editor):
    """Remove all template phases."""
    Phase = apps.get_model('game', 'Phase')

    # Delete all template phases (will cascade to Units and SupplyCenters)
    Phase.objects.filter(game=None, status='template').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('variant', '0004_add_italy_vs_germany_variant'),
        ('game', '0014_add_variant_to_phase'),
    ]

    operations = [
        migrations.RunPython(
            create_template_phases,
            reverse_create_template_phases,
        ),
    ]