#!/usr/bin/env python3
"""
Generate Django migrations for a godip variant from JSON export.

Usage:
    python generate_variant_migrations.py --variant service/variant/data/hundred.json
"""

import argparse
import json
import sys
from pathlib import Path
from datetime import datetime
import re


def get_last_migration(app_name, output_dir):
    """Find the last migration number for a given app."""
    migrations_dir = Path(output_dir) / app_name / "migrations"
    if not migrations_dir.exists():
        return None, None

    max_num = 0
    last_migration = None

    for file in migrations_dir.glob("*.py"):
        if file.name == "__init__.py":
            continue

        # Extract migration number (e.g., "0002" from "0002_add_variant.py")
        match = re.match(r"^(\d+)_", file.name)
        if match:
            num = int(match.group(1))
            if num > max_num:
                max_num = num
                last_migration = file.stem  # filename without extension

    return max_num, last_migration


VARIANT_MIGRATION_TEMPLATE = '''# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_variant(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Variant.objects.create(
        id="{variant_id}",
        name="{variant_name}",
        description="""{description}""",
        author="{author}"
    )


def remove_{variant_id}_variant(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Variant.objects.filter(id="{variant_id}").delete()


class Migration(migrations.Migration):

    dependencies = [
        ("variant", "{last_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_variant,
            remove_{variant_id}_variant,
        ),
    ]
'''


NATIONS_MIGRATION_TEMPLATE = """# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_nations(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Nation = apps.get_model("nation", "Nation")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")

    nations_data = {nations_data}

    for nation_data in nations_data:
        Nation.objects.create(
            name=nation_data["name"],
            color=nation_data["color"],
            variant={variant_id}_variant
        )


def remove_{variant_id}_nations(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Nation = apps.get_model("nation", "Nation")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    Nation.objects.filter(variant={variant_id}_variant).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("nation", "{last_migration}"),
        ("variant", "{variant_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_nations,
            remove_{variant_id}_nations,
        ),
    ]
"""


PROVINCES_MIGRATION_TEMPLATE = """# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_provinces(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Province = apps.get_model("province", "Province")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")

    provinces_data = {provinces_data}
    named_coast_parents = {named_coast_parents}

    # Create all provinces first
    for province_data in provinces_data:
        Province.objects.create(
            province_id=province_data["id"],
            name=province_data["name"],
            type=province_data["type"],
            supply_center=province_data["supply_center"],
            variant={variant_id}_variant,
        )

    # Set up named coast parent relationships
    for named_coast_id, parent_id in named_coast_parents.items():
        named_coast = Province.objects.get(variant={variant_id}_variant, province_id=named_coast_id)
        parent = Province.objects.get(variant={variant_id}_variant, province_id=parent_id)
        named_coast.parent = parent
        named_coast.save()


def remove_{variant_id}_provinces(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Province = apps.get_model("province", "Province")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    Province.objects.filter(variant={variant_id}_variant).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("province", "{last_migration}"),
        ("variant", "{variant_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_provinces,
            remove_{variant_id}_provinces,
        ),
    ]
"""


TEMPLATE_PHASE_MIGRATION_TEMPLATE = """# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_template_phase(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Phase = apps.get_model("phase", "Phase")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")

    Phase.objects.create(
        game=None,
        variant={variant_id}_variant,
        status="template",
        season="{season}",
        year={year},
        type="{type}",
        ordinal=1,
    )


def remove_{variant_id}_template_phase(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Phase = apps.get_model("phase", "Phase")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    Phase.objects.filter(game=None, variant={variant_id}_variant, status="template").delete()


class Migration(migrations.Migration):

    dependencies = [
        ("phase", "{last_migration}"),
        ("variant", "{variant_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_template_phase,
            remove_{variant_id}_template_phase,
        ),
    ]
"""


SUPPLY_CENTERS_MIGRATION_TEMPLATE = """# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_supply_centers(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Nation = apps.get_model("nation", "Nation")
    Province = apps.get_model("province", "Province")
    Phase = apps.get_model("phase", "Phase")
    SupplyCenter = apps.get_model("supply_center", "SupplyCenter")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    template_phase = Phase.objects.get(game=None, variant={variant_id}_variant, status="template")

    supply_centers_data = {supply_centers_data}

    for sc_data in supply_centers_data:
        nation = Nation.objects.get(variant={variant_id}_variant, name=sc_data["nation"])
        province = Province.objects.get(variant={variant_id}_variant, province_id=sc_data["province"])

        SupplyCenter.objects.create(
            nation=nation,
            province=province,
            phase=template_phase
        )


def remove_{variant_id}_supply_centers(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Phase = apps.get_model("phase", "Phase")
    SupplyCenter = apps.get_model("supply_center", "SupplyCenter")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    template_phase = Phase.objects.get(game=None, variant={variant_id}_variant, status="template")
    SupplyCenter.objects.filter(phase=template_phase).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("supply_center", "{last_migration}"),
        ("variant", "{variant_migration}"),
        ("nation", "{nations_migration}"),
        ("province", "{provinces_migration}"),
        ("phase", "{phase_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_supply_centers,
            remove_{variant_id}_supply_centers,
        ),
    ]
"""


UNITS_MIGRATION_TEMPLATE = """# Generated by generate_variant_migrations.py on {timestamp}

from django.db import migrations


def add_{variant_id}_units(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Nation = apps.get_model("nation", "Nation")
    Province = apps.get_model("province", "Province")
    Phase = apps.get_model("phase", "Phase")
    Unit = apps.get_model("unit", "Unit")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    template_phase = Phase.objects.get(game=None, variant={variant_id}_variant, status="template")

    units_data = {units_data}

    for unit_data in units_data:
        nation = Nation.objects.get(variant={variant_id}_variant, name=unit_data["nation"])
        province = Province.objects.get(variant={variant_id}_variant, province_id=unit_data["province"])

        Unit.objects.create(
            nation=nation,
            province=province,
            phase=template_phase,
            type=unit_data["type"]
        )


def remove_{variant_id}_units(apps, schema_editor):
    Variant = apps.get_model("variant", "Variant")
    Phase = apps.get_model("phase", "Phase")
    Unit = apps.get_model("unit", "Unit")

    {variant_id}_variant = Variant.objects.get(id="{variant_id}")
    template_phase = Phase.objects.get(game=None, variant={variant_id}_variant, status="template")
    Unit.objects.filter(phase=template_phase).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("unit", "{last_migration}"),
        ("variant", "{variant_migration}"),
        ("nation", "{nations_migration}"),
        ("province", "{provinces_migration}"),
        ("phase", "{phase_migration}"),
    ]

    operations = [
        migrations.RunPython(
            add_{variant_id}_units,
            remove_{variant_id}_units,
        ),
    ]
"""


def generate_variant_migration(variant_data, output_dir):
    """Generate the variant migration file."""
    variant_id = variant_data["id"]
    variant_name = variant_data["name"]

    # Find the last migration
    last_num, last_migration = get_last_migration("variant", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Create migration content
    content = VARIANT_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        variant_name=variant_name,
        description=variant_data["description"],
        author=variant_data["author"],
        last_migration=last_migration,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "variant" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = migrations_dir / f"{next_num:04d}_add_{variant_id}_variant.py"

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(f"    Depends on: {last_migration}")
    return migration_file


def generate_nations_migration(variant_data, output_dir, variant_migration_name):
    """Generate the nations migration file."""
    variant_id = variant_data["id"]

    # Find the last migration
    last_num, last_migration = get_last_migration("nation", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Format nations data as Python list
    nations_data = variant_data["nations"]

    # Create migration content
    content = NATIONS_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        nations_data=nations_data,
        last_migration=last_migration,
        variant_migration=variant_migration_name,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "nation" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = migrations_dir / f"{next_num:04d}_add_{variant_id}_nations.py"

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(f"    Depends on: {last_migration}, {variant_migration_name}")
    return migration_file


def generate_provinces_migration(variant_data, output_dir, variant_migration_name):
    """Generate the provinces migration file."""
    variant_id = variant_data["id"]

    # Find the last migration
    last_num, last_migration = get_last_migration("province", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Format provinces data - exclude 'parent' field as it will be set later
    provinces_data = []
    for province in variant_data["provinces"]:
        province_dict = {
            "id": province["id"],
            "name": province["name"],
            "type": province["type"],
            "supply_center": province["supply_center"],
        }
        provinces_data.append(province_dict)

    # Extract named coast parent relationships
    named_coast_parents = {}
    for province in variant_data["provinces"]:
        if "/" in province["id"] and "parent" in province:
            named_coast_parents[province["id"]] = province["parent"]

    # Create migration content
    content = PROVINCES_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        provinces_data=provinces_data,
        named_coast_parents=named_coast_parents,
        last_migration=last_migration,
        variant_migration=variant_migration_name,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "province" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = migrations_dir / f"{next_num:04d}_add_{variant_id}_provinces.py"

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(f"    Depends on: {last_migration}, {variant_migration_name}")
    return migration_file


def generate_template_phase_migration(variant_data, output_dir, variant_migration_name):
    """Generate the template phase migration file."""
    variant_id = variant_data["id"]

    # Find the last migration
    last_num, last_migration = get_last_migration("phase", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Get initial phase data
    initial_phase = variant_data["initial_phase"]

    # Create migration content
    content = TEMPLATE_PHASE_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        season=initial_phase["season"],
        year=initial_phase["year"],
        type=initial_phase["type"],
        last_migration=last_migration,
        variant_migration=variant_migration_name,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "phase" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = (
        migrations_dir / f"{next_num:04d}_add_{variant_id}_template_phase.py"
    )

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(f"    Depends on: {last_migration}, {variant_migration_name}")
    return migration_file


def generate_supply_centers_migration(
    variant_data,
    output_dir,
    variant_migration_name,
    nations_migration_name,
    provinces_migration_name,
    phase_migration_name,
):
    """Generate the supply centers migration file."""
    variant_id = variant_data["id"]

    # Find the last migration
    last_num, last_migration = get_last_migration("supply_center", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Format supply centers data
    supply_centers_data = variant_data["initial_supply_centers"]

    # Create migration content
    content = SUPPLY_CENTERS_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        supply_centers_data=supply_centers_data,
        last_migration=last_migration,
        variant_migration=variant_migration_name,
        nations_migration=nations_migration_name,
        provinces_migration=provinces_migration_name,
        phase_migration=phase_migration_name,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "supply_center" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = (
        migrations_dir / f"{next_num:04d}_add_{variant_id}_supply_centers.py"
    )

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(
        f"    Depends on: {last_migration}, {variant_migration_name}, {nations_migration_name}, {provinces_migration_name}, {phase_migration_name}"
    )
    return migration_file


def generate_units_migration(
    variant_data,
    output_dir,
    variant_migration_name,
    nations_migration_name,
    provinces_migration_name,
    phase_migration_name,
):
    """Generate the units migration file."""
    variant_id = variant_data["id"]

    # Find the last migration
    last_num, last_migration = get_last_migration("unit", output_dir)
    if last_num is None:
        print("  ✗ Error: No existing migrations found")
        return None

    next_num = last_num + 1

    # Format units data
    units_data = variant_data["initial_units"]

    # Create migration content
    content = UNITS_MIGRATION_TEMPLATE.format(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        variant_id=variant_id,
        units_data=units_data,
        last_migration=last_migration,
        variant_migration=variant_migration_name,
        nations_migration=nations_migration_name,
        provinces_migration=provinces_migration_name,
        phase_migration=phase_migration_name,
    )

    # Create migrations directory if needed
    migrations_dir = Path(output_dir) / "unit" / "migrations"
    migrations_dir.mkdir(parents=True, exist_ok=True)

    # Generate migration filename
    migration_file = migrations_dir / f"{next_num:04d}_add_{variant_id}_units.py"

    # Write the file
    with open(migration_file, "w") as f:
        f.write(content)

    print(f"  ✓ Created: {migration_file}")
    print(
        f"    Depends on: {last_migration}, {variant_migration_name}, {nations_migration_name}, {provinces_migration_name}, {phase_migration_name}"
    )
    return migration_file


def main():
    parser = argparse.ArgumentParser(
        description="Generate Django migrations from godip variant JSON"
    )
    parser.add_argument("--variant", required=True, help="Path to variant JSON file")
    parser.add_argument(
        "--output-dir",
        default="service",
        help="Base path for service apps (default: service)",
    )

    args = parser.parse_args()

    # Load JSON
    print(f"Loading variant from: {args.variant}")
    try:
        with open(args.variant, "r") as f:
            variant_data = json.load(f)
    except FileNotFoundError:
        print(f"Error: File not found: {args.variant}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON: {e}")
        sys.exit(1)

    # Print variant info
    print(f"\nVariant: {variant_data['name']}")
    print(f"ID: {variant_data['id']}")
    print(f"Author: {variant_data['author']}")
    print(f"Nations: {len(variant_data['nations'])}")
    print(f"Provinces: {len(variant_data['provinces'])}")
    print(f"Initial Units: {len(variant_data['initial_units'])}")
    print(f"Initial Supply Centers: {len(variant_data['initial_supply_centers'])}")

    print("\nGenerating migrations...")
    print("=" * 50)

    # Generate variant migration
    print("\n1. Variant migration:")
    variant_file = generate_variant_migration(variant_data, args.output_dir)
    if not variant_file:
        sys.exit(1)
    variant_migration_name = variant_file.stem

    # Generate nations migration
    print("\n2. Nations migration:")
    nations_file = generate_nations_migration(
        variant_data, args.output_dir, variant_migration_name
    )
    if not nations_file:
        sys.exit(1)

    # Generate provinces migration
    print("\n3. Provinces migration:")
    provinces_file = generate_provinces_migration(
        variant_data, args.output_dir, variant_migration_name
    )
    if not provinces_file:
        sys.exit(1)

    # Generate template phase migration
    print("\n4. Template phase migration:")
    phase_file = generate_template_phase_migration(
        variant_data, args.output_dir, variant_migration_name
    )
    if not phase_file:
        sys.exit(1)

    # Generate supply centers migration
    print("\n5. Supply centers migration:")
    supply_centers_file = generate_supply_centers_migration(
        variant_data,
        args.output_dir,
        variant_migration_name,
        nations_file.stem,
        provinces_file.stem,
        phase_file.stem,
    )
    if not supply_centers_file:
        sys.exit(1)

    # Generate units migration
    print("\n6. Units migration:")
    units_file = generate_units_migration(
        variant_data,
        args.output_dir,
        variant_migration_name,
        nations_file.stem,
        provinces_file.stem,
        phase_file.stem,
    )
    if not units_file:
        sys.exit(1)

    print("\n" + "=" * 50)
    print("Migration generation complete!")


if __name__ == "__main__":
    main()
